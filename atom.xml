<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cillivian&#39;s blog</title>
  
  <subtitle>Seize your light.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-05T10:21:45.115Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cillivian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jsp 内置对象</title>
    <link href="http://yoursite.com/2019/03/05/jsp-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2019/03/05/jsp-内置对象/</id>
    <published>2019-03-05T10:19:00.000Z</published>
    <updated>2019-03-05T10:21:45.115Z</updated>
    
    <content type="html"><![CDATA[<hr><p>author: Cilliviantitle: jsp 内置对象date: 2019-03-05 18:07:45tags: [JSP]categories: 学习description: 关于JSP的内置对象out-&gt;response.getWriterrequest -&gt;Service方法中的req参数response -&gt;Service方法中的resp参数session -&gt;request.getSessionapplication -&gt;getServletContextexception -&gt;Throwablepage  -&gt;thispageContext  -&gt;PageContextConfig -&gt;getServletConfig</p><hr><h1>JSP 内置对象</h1><p><strong>目录 (Table of Contents)</strong></p><p>[TOCM]</p><h3>request</h3><p>request 对象是 javax.servlet.httpServletRequest类型的对象。 该对象代表了客户端的请求信息，主要用于接受通过HTTP协议传送到服务器的数据。（包括头信息、系统信息、请求方式以及请求参数等）。request对象的作用域为一次请求。</p><h3>response</h3><p>response 代表的是对客户端的响应，主要是将JSP容器处理过的对象传回到客户端。response对象也具有作用域，它只在JSP页面内有效。</p><h3>session</h3><h4>1.什么是session：</h4><p>从一个客户打开浏览器并连接到服务器开始，到客户关闭浏览器离开这个服务器结束，被称为一个会话。当一个客户访问一个服务器时，可能会在这个服务器的几个页面之间反复连接，反复刷新一个页面，服务器应当通过某种办法知道这是同一个客户，这就需要session对象。</p><h4>2．session对象的ID：</h4><p>当一个客户首次访问服务器上的一个JSP页面时，JSP引擎产生一个session对象，同时分配一个String类型的ID号，JSP引擎同时将这个ID号发送到客户端，存放在Cookie中，这样session对象和客户之间就建立了一一对应的关系。当客户再访问连接该服务器的其他页面时，不再分配给客户新的session对象，直到客户关闭浏览器后，服务器端该客户的session对象才取消，并且和客户的会话对应关系消失。当客户重新打开浏览器再连接到该服务器时，服务器为该客户再创建一个新的session对象。</p><h4>3.session对象存在一定时间过期问题</h4><p>所以存在session中的名值对会在一定时间后失去，可以通过更改session有效时间来避免这种情况。同时编程时尽量避免将大量有效信息存储在session中，request是一个不错的替代对象。</p><h3>application</h3><h4>1．什么是application:</h4><p>服务器启动后就产生了这个application对象，当客户在所访问的网站的各个页面之间浏览时，这个application对象都是同一个，直到服务器关闭。但是与session不同的是，所有客户的application对象都是同一个，即所有客户共享这个内置的application对象。</p><h4>2．application对象常用方法:</h4><p>(1)public void setAttribute(String key,Object obj): 将参数Object指定的对象obj添加到application对象中，并为添加的对象指定一个索引关键字。(2)public Object getAttribute(String key): 获取application对象中含有关键字的对象。outout 对象用于在Web浏览器内输出信息，并且管理应用服务器上的输出缓冲区。在使用 out 对象输出数据时，可以对数据缓冲区进行操作，及时清除缓冲区中的残余数据，为其他的输出让出缓冲空间。待数据输出完毕后，要及时关闭输出流。pagepage 对象代表JSP本身，只有在JSP页面内才是合法的。 page隐含对象本质上包含当前 Servlet接口引用的变量，类似于Java编程中的 this 指针。configconfig 对象的主要作用是取得服务器的配置信息。通过 pageContext对象的 getServletConfig() 方法可以获取一个config对象。当一个Servlet 初始化时，容器把某些信息通过 config对象传递给这个 Servlet。 开发者可以在web.xml 文件中为应用程序环境中的Servlet程序和JSP页面提供初始化参数。exceptionjava.lang.Throwable 的实例，该实例代表其他页面中的异常和错误。只有当页面是错误处理页面，即编译指令page 的isErrorPage 属性为true 时，该对象才可以使用。常用的方法有getMessage()和printStackTrace()等。pageContextpageContext 对象的作用是取得任何范围的参数，通过它可以获取 JSP页面的out、request、reponse、session、application 等对象。pageContext对象的创建和初始化都是由容器来完成的，在JSP页面中可以直接使用 pageContext对象。</p><p><a href="https://pandao.github.io/editor.md/examples/images/7.jpg" title="李健首张专辑《似水流年》封面" target="_blank" rel="noopener"><img src="https://pandao.github.io/editor.md/examples/images/7.jpg" alt=""></a></p><blockquote><p>图为：李健首张专辑《似水流年》封面</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;author: Cillivian
title: jsp 内置对象
date: 2019-03-05 18:07:45
tags: [JSP]
categories: 学习
description: 关于JSP的内置对象
out-&amp;gt;response.getW
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>js正则表达式的使用</title>
    <link href="http://yoursite.com/2019/03/05/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/03/05/js正则表达式的使用/</id>
    <published>2019-03-05T01:35:00.000Z</published>
    <updated>2019-03-05T01:38:12.308Z</updated>
    
    <content type="html"><![CDATA[<h3>正则表达式：</h3><hr><p>/正则表达式主体/修饰符(可选)其中修饰符是可选的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;正则表达式：&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;/正则表达式主体/修饰符(可选)
其中修饰符是可选的。&lt;/p&gt;

      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>关于JS中数组的函数调用使用</title>
    <link href="http://yoursite.com/2019/03/04/%E5%85%B3%E4%BA%8EJS%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/03/04/关于JS中数组的函数调用使用/</id>
    <published>2019-03-04T12:37:15.000Z</published>
    <updated>2019-03-04T13:21:31.573Z</updated>
    
    <content type="html"><![CDATA[<h1>JavaScript数组ARRAY的操作</h1><h4>1.delete方法：</h4><p>delete删除的只是数组元素的值，所占的空间是并没有删除的代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr=[12,23,44,5,6,23,43,34];</span><br><span class="line">console.log(arr.length);</span><br><span class="line">console.log(arr);</span><br><span class="line">delete arr[1];</span><br><span class="line">console.log(arr);</span><br><span class="line">console.log(arr[1]);</span><br><span class="line">console.log(arr.length);</span><br></pre></td></tr></table></figure></p><p>这个就很直观的看得出来，删除后，数组的长度前后是并没有变化的。被删除的元素位置还是留在那,读取到该下标元素的时候，元素的值为undefined</p><h4>2.splice方法：</h4><p>该方法删除数组指定的元素，并且可以给数组添加新的元素，即实现删除/替换数组的某项元素。splice(下标，删除的长度，替换的新元素)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.splice(index,length,items,items,...);</span><br></pre></td></tr></table></figure></p><p>注意：如果不添加item的时候，就是数组的删除，会改变原数组的长度代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr=[12,23,44,5,6,23,43,34];</span><br><span class="line">console.log(arr.length);</span><br><span class="line">arr.splice(1,2);//从下标为1的元素开始删除，删除的长度为2即23，44两个数 console.log(arr);</span><br><span class="line">console.log(arr.length);</span><br></pre></td></tr></table></figure></p><p>从运行结果中可以看得出来，原数组中的23，44两个元素被删除了，数组长度由原来的8变成了6</p><h4>3.shift方法:</h4><p>删除第一个数组元素，不带参数，数组的长度会减1,并且返回的是数组的第一个元素；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.shift();</span><br></pre></td></tr></table></figure></p><p>注意:如果数组是空的，那么 shift() 方法将不进行任何操作，返回 undefined 值。请注意，该方法不创建新数组，而是直接修改原有的 arrayObject</p><h4>4.pop方法:</h4><p>删除数组的最后一个元素,数组的长度会减1,并且返回的是数组的最后一个元素(通过alert()可以查看出返回的是哪个值)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr.pop();</span><br><span class="line">var arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;];</span><br><span class="line">alert(arr.shift());</span><br><span class="line">arr.pop();</span><br><span class="line">alert(arr.pop());</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure></p><h4>5.unshift()：</h4><p>方法:在数组的第一个元素前面增加一个元素,数组的长度会加1，该方法会改变原来数组的长度.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.unshift(newElement)</span><br></pre></td></tr></table></figure></p><h4>6.push():</h4><p>在数组的结尾追加元素,可以追加多个元素，该方法会改变原来数组的长度　<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　arr.push(newElement,...);</span><br></pre></td></tr></table></figure></p><p>注意：追加的元素最好是简单类型的字面量，不要是数组，如果是数组的，追加过来的元素会在该位置显示为一个数组，元素就会变成了二维数组，甚至多维数组</p><h4>7.concat():</h4><p>合并两个或多个数组，该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">var a = [1,2,3];</span></span><br><span class="line"><span class="undefined">document.write(a.concat(4,5));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">输出1,2,3,4,5</span><br></pre></td></tr></table></figure></p><h4>8.sort():</h4><p>该方法是对数组进行升序排序，规则是按ascii表的规则来的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.sort();</span><br></pre></td></tr></table></figure></p><h4>9.reverse():</h4><p>对数组进行翻转操作</p><pre><code> arr.reverse();</code></pre><p>js模拟原理实现的代码：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&quot;诸葛亮&quot;,&quot;安琪拉&quot;,&quot;狄仁杰&quot;,&quot;后羿&quot;,&quot;荆轲&quot;,&quot;娜可露露&quot;,&quot;鲁班&quot;];</span><br><span class="line">//思路：实现方法：1.操作原数组，让原数组第一位和最后一个位调换位置，以此类推。</span><br><span class="line">for(var i=0;i&lt;arr.length/2;i++)&#123;</span><br><span class="line">//让前后数组中的元素交换位置。</span><br><span class="line">var temp = arr[i];</span><br><span class="line">//前面项和对应的后面项交换位置。（arr.length-1-i = 倒数第i+1项）</span><br><span class="line">arr[i] = arr[arr.length-1-i];</span><br><span class="line">arr[arr.length-1-i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure></p><h4>10.isArray(obj):</h4><p>该方法适用于确定传递的值是否为Array，是Array返回的则是true，否的话返回的是false<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Array.isArray([1, 2, 3]); // true</span><br><span class="line">Array.isArray(&#123;foo: 123&#125;); // false</span><br><span class="line">Array.isArray(&quot;foobar&quot;); // false</span><br><span class="line">Array.isArray(undefined); // false</span><br></pre></td></tr></table></figure></p><p>intanceof 同样也是检测使用的<br>　　语法：a instanceof Object<br>　　返回的值是true or false;其他方法：</p><h4>11.slice():</h4><p>从当前数组中截取一个新的数组，不影响原来的数组，参数start从0开始,end从1开始(从第一个元素开始)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　  arr.slice(star,end);</span><br></pre></td></tr></table></figure></p><p>注意：如果slice里面没有定义结束的位置的话，那么截取的元素就从被截取元素的开始位置一直截取到结束位置</p><h4>12.join()：</h4><p>把数组转换成为字符串，可以自己定义分隔符 arr.join(&quot;自定义分隔符如&amp;&quot;)，默认是逗号隔开，如果要没有分隔符的话，就arr.join(&quot;&quot;);</p><h4>13.toString():</h4><p>同样是把数组转成字符串，但是返回的字符串每项都是用逗号隔开的</p><h4>14.split() :</h4><p>把一个字符串分割成字符串数组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringObject.split( char  [,howmany]);</span><br></pre></td></tr></table></figure></p><p>希望把单词分割为字母，或者把字符串分割为字符，可使用下面的代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var Arr = &quot;hello&quot;.split(&quot;&quot;) ;  //可返回 [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      关于JavaScript 数组ARRAY的操作，比如splice,shift,push,等等函数的使用
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>About my sweetie --Sophia</title>
    <link href="http://yoursite.com/2018/12/31/About-my-sweetie-Sophia/"/>
    <id>http://yoursite.com/2018/12/31/About-my-sweetie-Sophia/</id>
    <published>2018-12-31T07:51:00.000Z</published>
    <updated>2018-12-31T07:55:15.709Z</updated>
    
    <content type="html"><![CDATA[<p>Since I see you...</p><hr><p>At the time of 3 Feb, you met me at the frist sight</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Since I see you...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;At the time of 3 Feb, you met me at the frist sight&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
      <category term="love" scheme="http://yoursite.com/tags/love/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/12/30/hello-world/"/>
    <id>http://yoursite.com/2018/12/30/hello-world/</id>
    <published>2018-12-30T09:50:28.266Z</published>
    <updated>2018-12-30T17:03:52.329Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2>Quick Start</h2><h3>Create a new post</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3>Run server</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3>Generate static files</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3>Deploy to remote sites</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="init" scheme="http://yoursite.com/tags/init/"/>
    
  </entry>
  
</feed>
