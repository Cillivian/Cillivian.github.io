<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Flex 布局]]></title>
    <url>%2F2019%2F11%2F26%2FFlex-%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[flex布局 flex意味“弹性盒子”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为flex布局。采用flex布局的元素，称为flex容器，它的所有子元素自动成为容器成员。 如果需要将容器设为flex容器，则第一步如下将div设置为flex容器： 12345&lt;style&gt;div&#123; display:felx;&#125;&lt;/style&gt; 容器的属性 flex-direction决定子元素的排列方向 决定主轴的方向（即项目的排列方向）。它有4个可能的值 ： row默认值，主轴为水平方向,子元素从左向右排列 实例： 123456789101112131415 &lt;div class="mydiv"&gt;&lt;div&gt;我是1&lt;/div&gt;&lt;div&gt;我是2&lt;/div&gt;&lt;div&gt;我是3&lt;/div&gt; &lt;/div&gt; &lt;style&gt; .mydiv&#123; width: 400px; border: 2px solid pink; padding: 10px; display: flex; flex-direction: row;&#125; &lt;/style&gt; row-reverse：主轴为水平方向，起点在容器的右端。 123.mydiv&#123;flex-direction: row-reverse;&#125; column：主轴为垂直方向，起点在容器的上沿。 123.mydiv&#123;flex-direction: column;&#125; column-reverse：主轴为垂直方向，起点在容器的下沿 123.mydiv&#123;flex-direction: column-reverse;&#125; flex-wrap规定如果一行放不下如何换行 默认情况下容器变得额所有项目都排在一条线上，flex-wrap定义如果一行排不下如何换行。他的值有三个：nowrap，wrap，wrap-reverse noerap(default):不换行 1234div&#123;flex-direction:row;flex-wrap:nowrap;&#125; 如果不换行则会挤压子元素，放在一条线上。 wrap：换行，第一行在上方 1234div&#123; flex-direction:row; flex-wrap:wrap;&#125; wrap-reverse :换行，第一行在下方 123div&#123; flex-direction&#125; flex-flow是上面两个属性的简写形式 是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。 例如： 123div&#123;flex-flow:row wrap;&#125; justify-content 定义在主轴上的对齐方式 justify-content的值有五个： flex-start，flex-end，center，space-between，space-around flex-start 向主轴的起始位置对齐，也就是从主轴的起始位置开始排列。 12345div&#123; display:flex; flex-direction:row; justify-content:flex-start;&#125; flex-end 向主轴结束位置对齐，也就是说从主轴结束的位置开始排列。 12345div&#123;display:flex;flex-direction:row;justify-content:flex-end;&#125; center 居中显示 12345div&#123;display:flex;flex-direction:row;justify-content:center;&#125; space-between：如果有两个以上的项目，则容器主轴的开始和结束位置各一个，其他的项目均匀排列，项目之间的间隔相等。排列顺序同样和flex-direction有关。如果只有两个项目则一边一个。如果只有一个项目则只在容器主轴的开始位置排列 12345div&#123; display: flex; flex-direction: row; justify-content: space-between;&#125; space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。排列顺序同样和flex-direction有关。如果只有一个项目则排列在中间。 12345div&#123; display: flex; flex-direction: row; justify-content: space-around;&#125; align-content定义了多根轴线（多行）的对齐方式 align-content属性定义了多根轴线（多行）的对齐方式。如果项目只有一根轴线（一行），该属性不起作用。 如果flex-direction的值是column，则该属性定义了多列的对齐方式。如果项目只有一列，该属性不起左右。 属性值包括： stretch（默认值）：多行占满整个交叉轴。 12345div&#123; display:flex; flex-direction:row; align-content:stretch; &#125; flex-start：与交叉轴的起点对齐。 123456div&#123; display:flex; flex-wrap:wrap; flex-direction:row; align-content:flex-start;&#125; flex-end:与交叉轴的终点对齐 123456div&#123; display:flex; flex-wrap:wrap; align-content:flex-end;&#125; center：与交叉轴的中点对齐。 12345div&#123;display:flex;flex-flow:row wrap;align-content:center;&#125; space-between: 与交叉轴两端对齐，轴线之间的间隔平均分布。 12345div&#123; display:flex; flex-wrap:wrap; align-content:space-between;&#125; space-around: 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 12345div&#123; display:flex; flex-wrap:wrap; align-content:space-around;&#125; 瓜分父容器的空间 1.先了解什么是剩余空间现在有一个容器A，它的里面有三个元素a1,a2,a3，剩余空间=容器A的宽度-a1-a2-a3 flex-grow用于瓜分父容器的剩余空间 flex-grow设置在flex容器的子项目上。 flex-grow默认为0。 上述例子中，如果A容器宽度为500px,a1的宽度为100px，a2的宽度为200px，a3的宽度为40px,那么剩余宽度为500-100-200-40=170px; 例子1： 如果此时我们队a1设置flex-grow:1，那么剩余的170px都会分给a1，a1原来有100px此时会有100px+170px=270px; 例子2： 如果a2此时也来瓜分剩余空间，a2中设置了flex-grow:2,那么父容器会把剩余空间分成三份，a1分1/3，a2分2/3 flex-basis设置或检索弹性盒伸缩基准值。 它的属性值可以设置： （1）一个长度单位或者一个百分比，规定灵活项目的初始长度 （2）auto，默认值，长度等于灵活项目的长度，如果该项目未指定长度，则长度将根据内容决定。 实例：现在在一个flex容器中有3个div 12345&lt;div class="mydiv"&gt;&lt;div&gt;我是1&lt;/div&gt;&lt;div&gt;我是2哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈&lt;/div&gt;&lt;div&gt;我是3哈哈哈哈哈哈哈哈&lt;/div&gt;&lt;/div&gt; 这三个div都没有设置宽度，第二个div设置了flex-basis: 80px; 1234567891011121314151617181920212223242526.mydiv&#123; width: 350px; border: 2px solid pink; padding: 10px; display: flex; flex-wrap: wrap; align-content:space-around;&#125;.mydiv div&#123; height: 100px;&#125;.mydiv div:first-child&#123; background-color: red;&#125;.mydiv div:nth-child(2)&#123; background-color: green; flex-basis: 80px;&#125;.mydiv div:nth-child(3)&#123; background-color: orange;&#125; 效果如下： 综上所述，第一个div宽度会根据内容的多少来显示，第二个div设置了flex-basis为80px，所以它的宽度不会根据内容多而变宽，第三个div未设置宽度，它内容多了后会自动把它的宽度撑开。 也就是说，在分配空间钱，如果子容器设置了flex-basis或者width，它会先跟父容器预约这么多的空间，然后剩下的才是归到剩余空间，然后父容器再把剩余空间分配给设置了flex-grow的容器，注：如果同时设置了flex-basis和width，那么width属性会被覆盖，也就是说flex-basis的优先级比width高，如果flex-basis和width其中有一个是auto，那么另外一个非auto的属性优先级会更高。 使用flex实现水平垂直居中 设置如下,需要在被居中层的父级中设置： 12345.parent&#123;justify-content:center;align-content:center;display:flex;&#125;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实现简单的防抖和节流(Debounce and throttle)]]></title>
    <url>%2F2019%2F11%2F26%2F%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81-Debounce-and-throttle%2F</url>
    <content type="text"><![CDATA[防抖函数： 所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间 123456789101112function debounce(func,wait)&#123; let timeout; return function()&#123; let context=this, args=arguments; if(timeout) clearTimeout(timeout); this.timeout=setTimeout(() =&gt;&#123; func.apply(context,args); &#125;,wait); &#125;&#125; 高阶防抖函数：(立即执行) 12345678910111213141516function debounce(func,wait) &#123; let timeout; return function () &#123; let context = this; let args = arguments; if (timeout) clearTimeout(timeout); let callNow = !timeout; timeout = setTimeout(() =&gt; &#123; timeout = null; &#125;, wait) if (callNow) func.apply(context, args) &#125;&#125; 带参数立即执行 12345678910111213141516171819202122232425262728/** * @desc 函数防抖 * @param func 函数 * @param wait 延迟执行毫秒数 * @param immediate true 表立即执行，false 表非立即执行 */function debounce(func,wait,immediate) &#123; let timeout; return function () &#123; let context = this; let args = arguments; if (timeout) clearTimeout(timeout); if (immediate) &#123; var callNow = !timeout; timeout = setTimeout(() =&gt; &#123; timeout = null; &#125;, wait) if (callNow) func.apply(context, args) &#125; else &#123; timeout = setTimeout(function()&#123; func.apply(context, args) &#125;, wait); &#125; &#125;&#125; 节流： 所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率。 对于节流，一般有两种方式可以实现，分别是时间戳版和定时器版。 时间戳： 123456789101112function throttle(func, wait) &#123; var previous = 0; return function() &#123; let now = Date.now(); let context = this; let args = arguments; if (now - previous &gt; wait) &#123; func.apply(context, args); previous = now; &#125; &#125;&#125; 定时器版本： 1234567891011121314function throttle(func,wait)&#123; var timeout; return function () &#123; let context=this, args=arguments; if(!timeout)&#123; timeout=setTimeout(()=&gt;&#123; timeout=null; func.apply(context,args); &#125;,wait); &#125; &#125;&#125; 合在一起的版本（通过type来控制）： 1234567891011121314151617181920212223242526272829303132/** * @desc 函数节流 * @param func 函数 * @param wait 延迟执行毫秒数 * @param type 1 表时间戳版，2 表定时器版 */function throttle(func, wait ,type) &#123; if(type===1)&#123; let previous = 0; &#125;else if(type===2)&#123; let timeout; &#125; return function() &#123; let context = this; let args = arguments; if(type===1)&#123; let now = Date.now(); if (now - previous &gt; wait) &#123; func.apply(context, args); previous = now; &#125; &#125;else if(type===2)&#123; if (!timeout) &#123; timeout = setTimeout(() =&gt; &#123; timeout = null; func.apply(context, args) &#125;, wait) &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jsp 内置对象]]></title>
    <url>%2F2019%2F03%2F05%2Fjsp-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[JSP 内置对象 目录 (Table of Contents) request request 对象是 javax.servlet.httpServletRequest类型的对象。 该对象代表了客户端的请求信息，主要用于接受通过HTTP协议传送到服务器的数据。（包括头信息、系统信息、请求方式以及请求参数等）。request对象的作用域为一次请求。 response response 代表的是对客户端的响应，主要是将JSP容器处理过的对象传回到客户端。response对象也具有作用域，它只在JSP页面内有效。 session 1.什么是session： 从一个客户打开浏览器并连接到服务器开始，到客户关闭浏览器离开这个服务器结束，被称为一个会话。当一个客户访问一个服务器时，可能会在这个服务器的几个页面之间反复连接，反复刷新一个页面，服务器应当通过某种办法知道这是同一个客户，这就需要session对象。 2．session对象的ID： 当一个客户首次访问服务器上的一个JSP页面时，JSP引擎产生一个session对象，同时分配一个String类型的ID号，JSP引擎同时将这个ID号发送到客户端，存放在Cookie中，这样session对象和客户之间就建立了一一对应的关系。当客户再访问连接该服务器的其他页面时，不再分配给客户新的session对象，直到客户关闭浏览器后，服务器端该客户的session对象才取消，并且和客户的会话对应关系消失。当客户重新打开浏览器再连接到该服务器时，服务器为该客户再创建一个新的session对象。 3.session对象存在一定时间过期问题 所以存在session中的名值对会在一定时间后失去，可以通过更改session有效时间来避免这种情况。同时编程时尽量避免将大量有效信息存储在session中，request是一个不错的替代对象。 application 1．什么是application: 服务器启动后就产生了这个application对象，当客户在所访问的网站的各个页面之间浏览时，这个application对象都是同一个，直到服务器关闭。但是与session不同的是，所有客户的application对象都是同一个，即所有客户共享这个内置的application对象。 2．application对象常用方法: (1)public void setAttribute(String key,Object obj): 将参数Object指定的对象obj添加到application对象中，并为添加的对象指定一个索引关键字。 (2)public Object getAttribute(String key): 获取application对象中含有关键字的对象。 out out 对象用于在Web浏览器内输出信息，并且管理应用服务器上的输出缓冲区。在使用 out 对象输出数据时，可以对数据缓冲区进行操作，及时清除缓冲区中的残余数据，为其他的输出让出缓冲空间。待数据输出完毕后，要及时关闭输出流。 page page 对象代表JSP本身，只有在JSP页面内才是合法的。 page隐含对象本质上包含当前 Servlet接口引用的变量，类似于Java编程中的 this 指针。 config config 对象的主要作用是取得服务器的配置信息。通过 pageContext对象的 getServletConfig() 方法可以获取一个config对象。当一个Servlet 初始化时，容器把某些信息通过 config对象传递给这个 Servlet。 开发者可以在web.xml 文件中为应用程序环境中的Servlet程序和JSP页面提供初始化参数。 exception java.lang.Throwable 的实例，该实例代表其他页面中的异常和错误。只有当页面是错误处理页面，即编译指令page 的isErrorPage 属性为true 时，该对象才可以使用。常用的方法有getMessage()和printStackTrace()等。 pageContext pageContext 对象的作用是取得任何范围的参数，通过它可以获取 JSP页面的out、request、reponse、session、application 等对象。pageContext对象的创建和初始化都是由容器来完成的，在JSP页面中可以直接使用 pageContext对象。 图为：李健首张专辑《似水流年》封面]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js正则表达式的使用]]></title>
    <url>%2F2019%2F03%2F05%2Fjs%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[正则表达式： /正则表达式主体/修饰符(可选) 其中修饰符是可选的。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于JS中数组的函数调用使用]]></title>
    <url>%2F2019%2F03%2F04%2F%E5%85%B3%E4%BA%8EJS%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[JavaScript数组ARRAY的操作 1.delete方法： delete删除的只是数组元素的值，所占的空间是并没有删除的 代码： 1234567var arr=[12,23,44,5,6,23,43,34];console.log(arr.length);console.log(arr);delete arr[1];console.log(arr);console.log(arr[1]);console.log(arr.length); 这个就很直观的看得出来，删除后，数组的长度前后是并没有变化的。被删除的元素位置还是留在那,读取到该下标元素的时候，元素的值为undefined 2.splice方法： 该方法删除数组指定的元素，并且可以给数组添加新的元素，即实现删除/替换数组的某项元素。splice(下标，删除的长度，替换的新元素) 1arr.splice(index,length,items,items,...); 注意：如果不添加item的时候，就是数组的删除，会改变原数组的长度 代码如下： 1234var arr=[12,23,44,5,6,23,43,34];console.log(arr.length);arr.splice(1,2);//从下标为1的元素开始删除，删除的长度为2即23，44两个数 console.log(arr);console.log(arr.length); 从运行结果中可以看得出来，原数组中的23，44两个元素被删除了，数组长度由原来的8变成了6 3.shift方法: 删除第一个数组元素，不带参数，数组的长度会减1,并且返回的是数组的第一个元素； 1arr.shift(); 注意:如果数组是空的，那么 shift() 方法将不进行任何操作，返回 undefined 值。请注意，该方法不创建新数组，而是直接修改原有的 arrayObject 4.pop方法: 删除数组的最后一个元素,数组的长度会减1,并且返回的是数组的最后一个元素(通过alert()可以查看出返回的是哪个值) 123456arr.pop();var arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;];alert(arr.shift());arr.pop();alert(arr.pop());console.log(arr); 5.unshift()： 方法:在数组的第一个元素前面增加一个元素,数组的长度会加1，该方法会改变原来数组的长度. 1arr.unshift(newElement) 6.push(): 在数组的结尾追加元素,可以追加多个元素，该方法会改变原来数组的长度 1 arr.push(newElement,...); 注意：追加的元素最好是简单类型的字面量，不要是数组，如果是数组的，追加过来的元素会在该位置显示为一个数组，元素就会变成了二维数组，甚至多维数组 7.concat(): 合并两个或多个数组，该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本 1234567&lt;script type="text/javascript"&gt;var a = [1,2,3];document.write(a.concat(4,5));&lt;/script&gt;输出1,2,3,4,5 8.sort(): 该方法是对数组进行升序排序，规则是按ascii表的规则来的 1234567891011// 默认排序 arr.sort();// 按照数字大小排序var array=[1,3,5,7,4,8,9,0,2]array.sort((a,b)=&gt;&#123;return a-b&#125;)// output[0,1,2,4,5,,7,8,9]// 逆序array.sort((a,b)=&gt;&#123;return b-a&#125;)// output [9, 8, 7, 5, 4, 3, 2, 1, 0] 9.reverse(): 对数组进行翻转操作 arr.reverse(); js模拟原理实现的代码： 12345678910var arr = [&quot;诸葛亮&quot;,&quot;安琪拉&quot;,&quot;狄仁杰&quot;,&quot;后羿&quot;,&quot;荆轲&quot;,&quot;娜可露露&quot;,&quot;鲁班&quot;];//思路：实现方法：1.操作原数组，让原数组第一位和最后一个位调换位置，以此类推。for(var i=0;i&lt;arr.length/2;i++)&#123;//让前后数组中的元素交换位置。var temp = arr[i];//前面项和对应的后面项交换位置。（arr.length-1-i = 倒数第i+1项）arr[i] = arr[arr.length-1-i];arr[arr.length-1-i] = temp;&#125;console.log(arr); 10.isArray(obj): 该方法适用于确定传递的值是否为Array，是Array返回的则是true，否的话返回的是false 1234Array.isArray([1, 2, 3]); // trueArray.isArray(&#123;foo: 123&#125;); // falseArray.isArray(&quot;foobar&quot;); // falseArray.isArray(undefined); // false intanceof 同样也是检测使用的 语法：a instanceof Object 返回的值是true or false; 其他方法： 11.slice(): 从当前数组中截取一个新的数组，不影响原来的数组，参数start从0开始,end从1开始(从第一个元素开始) 1 arr.slice(star,end); 注意：如果slice里面没有定义结束的位置的话，那么截取的元素就从被截取元素的开始位置一直截取到结束位置 12.join()： 把数组转换成为字符串，可以自己定义分隔符 arr.join(&quot;自定义分隔符如&amp;&quot;)，默认是逗号隔开，如果要没有分隔符的话，就arr.join(&quot;&quot;); 13.toString(): 同样是把数组转成字符串，但是返回的字符串每项都是用逗号隔开的 14.split() : 把一个字符串分割成字符串数组 1StringObject.split( char [,howmany]); 希望把单词分割为字母，或者把字符串分割为字符，可使用下面的代码： 1var Arr = &quot;hello&quot;.split(&quot;&quot;) ; //可返回 [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[About my sweetie --Sophia]]></title>
    <url>%2F2018%2F12%2F31%2FAbout-my-sweetie-Sophia%2F</url>
    <content type="text"><![CDATA[Since I see you... At the time of 3 Feb, you met me at the frist sight]]></content>
      <tags>
        <tag>life</tag>
        <tag>love</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F30%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new "My New Post" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>init</tag>
      </tags>
  </entry>
</search>
